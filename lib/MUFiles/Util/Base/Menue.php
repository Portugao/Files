<?php
/**
 * MUFiles.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUFiles
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

/**
 * Utility base class for menue helper methods.
 */
class MUFiles_Util_Base_Menue extends Zikula_AbstractBase {
	/**
	 * Retrieve the base path for given object type and upload field combination.
	 *
	 * @param integer $collectionId
	 *        	id of collection
	 * @param integer $fileId
	 *        	id of file.
	 *        	
	 * @return mixed Output.
	 * @throws Exception if invalid object type is given.
	 */
	public function getCollectionMenue($collectionId = 0, $fileId = 0) {
		// we get a collection repository		
		$collectionRepository = MUFiles_Util_Model::getCollectionsRepository();
		
		// we get the current collection we want to edit
		if ($collectionId > 0) {		
		    $currentCollection = $collectionRepository->selectById($collectionId);
		}
		// we get the current file
		if ($fileId > 0) {
			// we get a file repository
			$fileRepository = MUFiles_Util_Model::getFilesRepository();
			$currentFile = $fileRepository->selectById($fileId);
		}
		
		$dom = ZLanguage::getModuleDomain('MUFiles');
		
		// initial
		$name = '';
		// initial
		$menue = '';
		
		// initial
		$where = '';

	    // where clause to get the collections without parent
		$where = 'tbl.id != \'' . $currentCollection ['id'] . '\'';
		$where .= ' AND ';	
		$where .= 'tbl.parent IS NULL';
		
		// initial
		$selectionArgs = array ();
		// nessecary args
		$selectionArgs = array (
				'ot' => 'collection',
				'where' => $where,
				'orderBy' => 'name' 
		);
		
		// initial
		$collections = '';
		// we get all collections without parent
		$collections = ModUtil::apiFunc ( 'MUFiles', 'selection', 'getEntities', $selectionArgs );
		// if count collections gt 0 we set html tags
		if (count ( $collections ) > 0) {
			$menue = '<h3 class="collections z-panel-header z-panel-indicator z-pointer">' . __('Collections', $dom) . '</h3>' . "\n";
			$menue .= '<fieldset class="form-control">' . "\n";
			$menue .= '<div class="z-formrow">' . "\n";
			$menue .= '<label for="parent">' . __('Collections', $dom) . '</label>' . "\n";
			if ($collectionId > 0 && $fileId == 0) {
			    $menue .= '<select id="parent" name="parent" class="z-form-dropdownlist  z-form-relationlist collection validation-passed">' . "\n";
			} else {
				$menue .= '<select id="aliascollection" name="aliascollection" class="z-form-dropdownlist  z-form-relationlist collection validation-passed">' . "\n";
									
			}
			$menue .= '<option value=""></option>';
		}
		
		$thereIsSelectedOption = 0;
	
		// for each collection we set an option tag
		foreach ( $collections as $collection ) {
			$thisCollection = $collectionRepository->selectById ($collection['id'] );
			//LogUtil::registerError ( 'Schleife diese Kollektion Id, Name : ' . $thisCollection ['id'] . ', ' . $thisCollection ['name'] );
			if (is_object($currentCollection)) {
			if ($currentCollection['parent']['id'] === $thisCollection['id']) {
				LogUtil::registerError('Foreach Kollektion: ' . $thisCollection['id'] . ', Aktuelle Kollektion: ' . $currentCollection['parent']['id']);
				$selected = ' selected=selected';
				$thereIsSelectedOption = 1;
			} else {
				$selected = '';
			}
			} else {
				if (is_object($currentFile)) {
					if ($currentFile['aliascollection'] != NULL && $currentFile['aliascollection']['id'] == $thisCollection['id']) {
				        $selected = ' selected=selected';
				        $thereIsSelectedOption = 1;
					} else {
						$selected = '';
					}
				} else {
					
				}
			}
			$name .= $thisCollection ['name'];
			$menue .= '<option value="' . $thisCollection ['id'] . '"' . $selected . '>' . $name . '</option>' . "\n";
			
			$menue = self::getParentPath ( $thisCollection ['id'], $currentCollection, $menue, $name, $collectionRepository );
		    $name = '';

		}
		if ($thereIsSelectedOption == 0) {
			$menue = str_replace('<option value=""></option>', '<option selected=selected value=""></option>', $menue);
		}
		if (count ( $collections ) > 0) {
			$menue .= '</select>' . "\n" . '</div>' . "\n" . '</fieldset>' . "\n";
		}
		
		return $menue;
	}
	
	/*
	 *
	 */
	private function getParentPath($collectionId, $currentCollection = 0, $menue, $name, $collectionRepository) {

		$where2 = 'tbl.parent = \'' . $collectionId . '\'';
		

		$selectionArgs2 = array (
				'ot' => 'collection',
				'where' => $where2,
				'orderBy' => 'name' 
		);
		
		$childrenCollections = '';
		$childrenCollections = ModUtil::apiFunc ( 'MUFiles', 'selection', 'getEntities', $selectionArgs2 );
		
		if (count ( $childrenCollections ) > 0 && is_array ( $childrenCollections )) {
			foreach ( $childrenCollections as $childrenCollection ) {
				// $name = self::getParentPath($childrenCollection['id'], $collectionName);
				$thisChildrenCollection = $collectionRepository->selectById ( $childrenCollection ['id'] );
				// if this collection is the parent of the current collection we set selected=selected
				if (is_object($currentCollection)) {
				if ($childrenCollection ['id'] == $currentCollection ['parent']['id']) {
					$selected = ' selected=selected';
				} else {
					$selected = '';
				} 
				} else {
					$selected = '';
				}

				$name .= ' : ' . $thisChildrenCollection ['name'];

				if ($currentCollection['id'] != $thisChildrenCollection['id']) {
				    $menue .= '<option value="' . $childrenCollection['id'] . '"' . $selected . '>' . $name . '</option>';
				}
				if ($thisChildrenCollection['parent'] != NULL) {
				    $menue = self::getParentPath ( $thisChildrenCollection['id'], $currentCollection, $menue, $name, $collectionRepository );
			    }
			}
		} else {
			//return $menue;
		}
		return $menue;
	}
}
