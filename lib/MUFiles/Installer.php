<?php
/**
 * MUFiles.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license
 * @package MUFiles
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.2 (http://modulestudio.de).
 */

/**
 * Installer implementation class.
 */
class MUFiles_Installer extends MUFiles_Base_Installer
{
    /**
     * Install the MUFiles application.
     *
     * @return boolean True on success, or false.
     */
    public function install()
    {
        parent::install();

        // Set up module hooks
        HookUtil::registerProviderBundles($this->version->getHookProviderBundles()); //TODO next version

        return true;
    }

    /**
     * Upgrade the MUFiles application from an older version.
     *
     * If the upgrade fails at some point, it returns the last upgraded version.
     *
     * @param integer $oldVersion Version to upgrade from.
     *
     * @return boolean True on success, false otherwise.
     */
    public function upgrade($oldVersion)
    {
        // Upgrade dependent on old version number
        switch ($oldVersion) {
            case '1.0.0':
                // set two new mod vars
                $this->setVar('itemsPerPage', 10);
                $this->setVar('itemsPerPageBackend', 10);
                // update the database schema
                try {
                    DoctrineHelper::updateSchema($this->entityManager, $this->listEntityClasses());
                } catch (\Exception $e) {
                    if (System::isDevelopmentMode()) {
                        return LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
                    }
                    return LogUtil::registerError($this->__f('An error was encountered while updating tables for the %s extension.', array($this->getName())));
                }
        }

        // update successful
        return true;
    }

    public function uninstall()
    {
        parent::uninstall();

        // unregister hook providers
        HookUtil::unregisterProviderBundles($this->version->getHookProviderBundles()); //TODO next version
        return true;
    }

    /**
     * Register persistent event handlers.
     * These are listeners for external events of the core and other modules.
     */
    protected function registerPersistentEventHandlers()
    {
        parent::registerPersistentEventHandlers();

        EventUtil::registerPersistentModuleHandler('MUFiles', 'module.scribite.editorhelpers', array('MUFiles_Listener_ThirdParty', 'getEditorHelpers'));
        EventUtil::registerPersistentModuleHandler('MUFiles', 'moduleplugin.tinymce.externalplugins', array('MUFiles_Listener_ThirdParty', 'getTinyMcePlugins'));
        EventUtil::registerPersistentModuleHandler('MUFiles', 'moduleplugin.ckeditor.externalplugins', array('MUFiles_Listener_ThirdParty', 'getCKEditorPlugins'));
    }
}
