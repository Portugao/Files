<?php
/**
 * MUFiles.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license
 * @package MUFiles
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de) at Tue Dec 03 15:01:29 CET 2013.
 */

/**
 * Version information implementation class.
 */
class MUFiles_Version extends MUFiles_Base_Version
{
    /**
     * Retrieves meta data information for this application.
     *
     * @return array List of meta data.
     */
    public function getMetaData()
    {
        $meta = array();
        // the current module version
        $meta['version']              = '1.0.0';
        // the displayed name of the module
        $meta['displayname']          = $this->__('MUFiles');
        // the module description
        $meta['description']          = $this->__('MUFiles module to handle files');
        //! url version of name, should be in lowercase without space
        $meta['url']                  = $this->__('mufiles');
        // core requirement
        $meta['core_min']             = '1.3.5'; // requires minimum 1.3.5
        $meta['core_max']             = '1.3.99'; // not ready for 1.4.0 yet

        // define special capabilities of this module
        $meta['capabilities'] = array(
                HookUtil::SUBSCRIBER_CAPABLE => array('enabled' => true)
                ,
                 HookUtil::PROVIDER_CAPABLE => array('enabled' => true)/*, // TODO: see #15
        'authentication' => array('version' => '1.0'),
        'profile'        => array('version' => '1.0', 'anotherkey' => 'anothervalue'),
        'message'        => array('version' => '1.0', 'anotherkey' => 'anothervalue')
        */
        );

        // permission schema
        $meta['securityschema'] = array(
                'MUFiles::' => '::',
                'MUFiles::Ajax' => '::',
                'MUFiles:ItemListBlock:' => 'Block title::',
                'MUFiles:ModerationBlock:' => 'Block title::',
                'MUFiles:Collection:' => 'Collection ID::',
                'MUFiles:Collection:Collection' => 'Collection ID:Collection ID:',
                'MUFiles:File:' => 'File ID::',
                'MUFiles:Collection:File' => 'Collection ID:File ID:',
        );
        // DEBUG: permission schema aspect ends


        return $meta;
    }
    
    /**
     * Define hook provider bundles.
     */
    protected function setupHookBundles()
    {
        $bundle = new Zikula_HookManager_ProviderBundle($this->name, 'provider.mufiles.ui_hooks.service', 'ui_hooks', $this->__('MUFiles - Embed collection or file'));
        // form_edit hook is used to add smiley selector and other code to new object form (validate and process hooks unneeded)
        $bundle->addServiceHandler('display_view', 'MUFiles_HookHandlers', 'uiView', 'mufiles.file');
        $bundle->addServiceHandler('form_edit', 'MUFiles_HookHandlers', 'uiEdit', 'mufiles.file');
        $bundle->addServiceHandler('validate_edit', 'MUFiles_HookHandlers', 'validateEdit', 'mufiles.file');
        $bundle->addServiceHandler('process_edit', 'MUFiles_HookHandlers', 'processEdit', 'mufiles.file');
        $bundle->addServiceHandler('process_delete', 'MUFiles_HookHandlers', 'processDelete', 'mufiles.file');
        
        $this->registerHookProviderBundle($bundle);
         
        parent::setupHookBundles();
    }
    
    /**
     * Define hook subscriber bundles.
     */
    protected function setupHookBundles()
    {
    
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.mufiles.ui_hooks.collections', 'ui_hooks', __('mufiles Collections Display Hooks'));
    
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'mufiles.ui_hooks.collections.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'mufiles.ui_hooks.collections.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'mufiles.ui_hooks.collections.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'mufiles.ui_hooks.collections.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'mufiles.ui_hooks.collections.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'mufiles.ui_hooks.collections.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'mufiles.ui_hooks.collections.process_delete');
        $this->registerHookSubscriberBundle($bundle);
    
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.mufiles.filter_hooks.collections', 'filter_hooks', __('mufiles Collections Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'mufiles.filter_hooks.collections.filter');
        $this->registerHookSubscriberBundle($bundle);
    
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.mufiles.ui_hooks.files', 'ui_hooks', __('mufiles Files Display Hooks'));
    
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'mufiles.ui_hooks.files.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'mufiles.ui_hooks.files.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'mufiles.ui_hooks.files.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'mufiles.ui_hooks.files.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'mufiles.ui_hooks.files.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'mufiles.ui_hooks.files.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'mufiles.ui_hooks.files.process_delete');
        $this->registerHookSubscriberBundle($bundle);
    
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.mufiles.filter_hooks.files', 'filter_hooks', __('mufiles Files Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'mufiles.filter_hooks.files.filter');
        $this->registerHookSubscriberBundle($bundle);
    
       /* $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.mufiles.ui_hooks.hookobjects', 'ui_hooks', __('mufiles Hookobjects Display Hooks'));
    
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'mufiles.ui_hooks.hookobjects.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'mufiles.ui_hooks.hookobjects.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'mufiles.ui_hooks.hookobjects.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'mufiles.ui_hooks.hookobjects.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'mufiles.ui_hooks.hookobjects.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'mufiles.ui_hooks.hookobjects.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'mufiles.ui_hooks.hookobjects.process_delete');
        $this->registerHookSubscriberBundle($bundle);
    
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.mufiles.filter_hooks.hookobjects', 'filter_hooks', __('mufiles Hookobjects Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'mufiles.filter_hooks.hookobjects.filter');
        $this->registerHookSubscriberBundle($bundle);*/
    
    
    }
}
