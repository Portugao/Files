<?php
/**
 * Files.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\FilesModule\Container\Base;

use Symfony\Component\Routing\RouterInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\Core\Doctrine\EntityAccess;
use Zikula\Core\LinkContainer\LinkContainerInterface;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use MU\FilesModule\Helper\ControllerHelper;
use MU\FilesModule\Helper\PermissionHelper;

/**
 * This is the link container service implementation class.
 */
abstract class AbstractLinkContainer implements LinkContainerInterface
{
    use TranslatorTrait;

    /**
     * @var RouterInterface
     */
    protected $router;

    /**
     * @var VariableApiInterface
     */
    protected $variableApi;

    /**
     * @var ControllerHelper
     */
    protected $controllerHelper;

    /**
     * @var PermissionHelper
     */
    protected $permissionHelper;

    /**
     * LinkContainer constructor.
     *
     * @param TranslatorInterface  $translator       Translator service instance
     * @param Routerinterface      $router           Router service instance
     * @param VariableApiInterface $variableApi      VariableApi service instance
     * @param ControllerHelper     $controllerHelper ControllerHelper service instance
     * @param PermissionHelper     $permissionHelper PermissionHelper service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        RouterInterface $router,
        VariableApiInterface $variableApi,
        ControllerHelper $controllerHelper,
        PermissionHelper $permissionHelper
    ) {
        $this->setTranslator($translator);
        $this->router = $router;
        $this->variableApi = $variableApi;
        $this->controllerHelper = $controllerHelper;
        $this->permissionHelper = $permissionHelper;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(TranslatorInterface $translator)
    {
        $this->translator = $translator;
    }

    /**
     * Returns available header links.
     *
     * @param string $type The type to collect links for
     *
     * @return array List of header links
     */
    public function getLinks($type = LinkContainerInterface::TYPE_ADMIN)
    {
        $contextArgs = ['api' => 'linkContainer', 'action' => 'getLinks'];
        $allowedObjectTypes = $this->controllerHelper->getObjectTypes('api', $contextArgs);

        $permLevel = LinkContainerInterface::TYPE_ADMIN == $type ? ACCESS_ADMIN : ACCESS_READ;

        // Create an array of links to return
        $links = [];

        if (LinkContainerInterface::TYPE_ACCOUNT == $type) {
            if (!$this->permissionHelper->hasPermission(ACCESS_OVERVIEW)) {
                return $links;
            }

            if (true === $this->variableApi->get('MUFilesModule', 'linkOwnCollectionsOnAccountPage', true)) {
                $objectType = 'collection';
                if ($this->permissionHelper->hasComponentPermission($objectType, ACCESS_READ)) {
                    $links[] = [
                        'url' => $this->router->generate('mufilesmodule_' . strtolower($objectType) . '_view', ['own' => 1]),
                        'text' => $this->__('My collections', 'mufilesmodule'),
                        'icon' => 'list-alt'
                    ];
                }
            }

            if (true === $this->variableApi->get('MUFilesModule', 'linkOwnFilesOnAccountPage', true)) {
                $objectType = 'file';
                if ($this->permissionHelper->hasComponentPermission($objectType, ACCESS_READ)) {
                    $links[] = [
                        'url' => $this->router->generate('mufilesmodule_' . strtolower($objectType) . '_view', ['own' => 1]),
                        'text' => $this->__('My files', 'mufilesmodule'),
                        'icon' => 'list-alt'
                    ];
                }
            }

            if ($this->permissionHelper->hasPermission(ACCESS_ADMIN)) {
                $links[] = [
                    'url' => $this->router->generate('mufilesmodule_collection_adminindex'),
                    'text' => $this->__('Files Backend', 'mufilesmodule'),
                    'icon' => 'wrench'
                ];
            }


            return $links;
        }

        $routeArea = LinkContainerInterface::TYPE_ADMIN == $type ? 'admin' : '';
        if (LinkContainerInterface::TYPE_ADMIN == $type) {
            if ($this->permissionHelper->hasPermission(ACCESS_READ)) {
                $links[] = [
                    'url' => $this->router->generate('mufilesmodule_collection_index'),
                    'text' => $this->__('Frontend', 'mufilesmodule'),
                    'title' => $this->__('Switch to user area.', 'mufilesmodule'),
                    'icon' => 'home'
                ];
            }
        } else {
            if ($this->permissionHelper->hasPermission(ACCESS_ADMIN)) {
                $links[] = [
                    'url' => $this->router->generate('mufilesmodule_collection_adminindex'),
                    'text' => $this->__('Backend', 'mufilesmodule'),
                    'title' => $this->__('Switch to administration area.', 'mufilesmodule'),
                    'icon' => 'wrench'
                ];
            }
        }
        
        if (in_array('collection', $allowedObjectTypes)
            && $this->permissionHelper->hasComponentPermission('collection', $permLevel)) {
            $links[] = [
                'url' => $this->router->generate('mufilesmodule_collection_' . $routeArea . 'view'),
                'text' => $this->__('Collections', 'mufilesmodule'),
                'title' => $this->__('Collections list', 'mufilesmodule')
            ];
        }
        if (in_array('file', $allowedObjectTypes)
            && $this->permissionHelper->hasComponentPermission('file', $permLevel)) {
            $links[] = [
                'url' => $this->router->generate('mufilesmodule_file_' . $routeArea . 'view'),
                'text' => $this->__('Files', 'mufilesmodule'),
                'title' => $this->__('Files list', 'mufilesmodule')
            ];
        }
        if ($routeArea == 'admin' && $this->permissionHelper->hasPermission(ACCESS_ADMIN)) {
            $links[] = [
                'url' => $this->router->generate('mufilesmodule_config_config'),
                'text' => $this->__('Settings', 'mufilesmodule'),
                'title' => $this->__('Manage settings for this application', 'mufilesmodule'),
                'icon' => 'wrench'
            ];
        }

        return $links;
    }

    /**
     * Returns the name of the providing bundle.
     *
     * @return string The bundle name
     */
    public function getBundleName()
    {
        return 'MUFilesModule';
    }
}
