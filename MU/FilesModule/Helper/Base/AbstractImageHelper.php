<?php
/**
 * Files.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\FilesModule\Helper\Base;

use Imagine\Image\ImageInterface;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;

/**
 * Helper base class for image methods.
 */
abstract class AbstractImageHelper
{
    /**
     * @var TranslatorInterface
     */
    protected $translator;
    
    /**
     * @var SessionInterface
     */
    protected $session;
    
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * Name of the application.
     *
     * @var string
     */
    protected $name;
    
    /**
     * ImageHelper constructor.
     *
     * @param TranslatorInterface  $translator  Translator service instance
     * @param SessionInterface     $session     Session service instance
     * @param VariableApiInterface $variableApi VariableApi service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        SessionInterface $session,
        VariableApiInterface $variableApi
    ) {
        $this->translator = $translator;
        $this->session = $session;
        $this->variableApi = $variableApi;
        $this->name = 'MUFilesModule';
    }
    
    /**
     * This method returns an Imagine runtime options array for the given arguments.
     *
     * @param string $objectType Currently treated entity type
     * @param string $fieldName  Name of upload field
     * @param string $context    Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args       Additional arguments
     *
     * @return array The selected runtime options
     */
    public function getRuntimeOptions($objectType = '', $fieldName = '', $context = '', array $args = [])
    {
        if (!in_array($context, ['controllerAction', 'api', 'actionHandler', 'block', 'contentType'])) {
            $context = 'controllerAction';
        }
    
        $contextName = '';
        if ($context == 'controllerAction') {
            if (!isset($args['controller'])) {
                $args['controller'] = 'user';
            }
            if (!isset($args['action'])) {
                $args['action'] = 'index';
            }
    
            if ($args['controller'] == 'ajax' && $args['action'] == 'getItemListAutoCompletion') {
                $contextName = $this->name . '_ajax_autocomplete';
            } else {
                $contextName = $this->name . '_' . $args['controller'] . '_' . $args['action'];
            }
        }
        if (empty($contextName)) {
            $contextName = $this->name . '_default';
        }
    
        return $this->getCustomRuntimeOptions($objectType, $fieldName, $contextName, $context, $args);
    }
    
    /**
     * This method returns an Imagine runtime options array for the given arguments.
     *
     * @param string $objectType  Currently treated entity type
     * @param string $fieldName   Name of upload field
     * @param string $contextName Name of desired context
     * @param string $context     Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args        Additional arguments
     *
     * @return array The selected runtime options
     */
    public function getCustomRuntimeOptions($objectType = '', $fieldName = '', $contextName = '', $context = '', array $args = [])
    {
        $options = [
            'thumbnail' => [
                'size'      => [100, 100], // thumbnail width and height in pixels
                'mode'      => $this->variableApi->get('MUFilesModule', 'thumbnailMode' . ucfirst($objectType) . ucfirst($fieldName), ImageInterface::THUMBNAIL_INSET),
                'extension' => null        // file extension for thumbnails (jpg, png, gif; null for original file type)
            ]
        ];
    
        if ($contextName == $this->name . '_ajax_autocomplete') {
            $options['thumbnail']['size'] = [100, 75];
    
            return $options;
        }
        if ($contextName == $this->name . '_relateditem') {
            $options['thumbnail']['size'] = [100, 75];
        } elseif ($context == 'controllerAction') {
            if (in_array($args['action'], ['view', 'display', 'edit'])) {
                $fieldSuffix = ucfirst($objectType) . ucfirst($fieldName) . ucfirst($args['action']);
                $defaultWidth = $args['action'] == 'view' ? 32 : 240;
                $defaultHeight = $args['action'] == 'view' ? 24 : 180;
                $options['thumbnail']['size'] = [
                    $this->variableApi->get('MUFilesModule', 'thumbnailWidth' . $fieldSuffix, $defaultWidth),
                    $this->variableApi->get('MUFilesModule', 'thumbnailHeight' . $fieldSuffix, $defaultHeight)
                ];
            }
        }
    
        return $options;
    }
}
