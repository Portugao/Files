<?php
/**
 * Files.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\FilesModule\Form\Type;

use Doctrine\ORM\EntityRepository;
use MU\FilesModule\Form\Type\Base\AbstractFileType;
use Symfony\Component\Form\FormBuilderInterface;
use Zikula\Common\Translator\TranslatorInterface;
use MU\FilesModule\Entity\Factory\EntityFactory;
use MU\FilesModule\Form\Type\Field\UploadType;
use MU\FilesModule\Helper\CollectionFilterHelper;
use MU\FilesModule\Helper\EntityDisplayHelper;
use MU\FilesModule\Helper\FeatureActivationHelper;
use MU\FilesModule\Helper\ListEntriesHelper;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;

/**
 * File editing form type implementation class.
 */
class FileType extends AbstractFileType
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
	/**
	 * FileType constructor.
	 *
	 * @param TranslatorInterface $translator    Translator service instance
	 * @param EntityFactory $entityFactory EntityFactory service instance
	 * @param CollectionFilterHelper $collectionFilterHelper CollectionFilterHelper service instance
	 * @param EntityDisplayHelper $entityDisplayHelper EntityDisplayHelper service instance
	 * @param ListEntriesHelper $listHelper ListEntriesHelper service instance
	 * @param FeatureActivationHelper $featureActivationHelper FeatureActivationHelper service instance
	 * @param VariableApiInterface $variableApi VariableApiInterface
	 */
	public function __construct(
			TranslatorInterface $translator,
			EntityFactory $entityFactory,
			CollectionFilterHelper $collectionFilterHelper,
			EntityDisplayHelper $entityDisplayHelper,
			ListEntriesHelper $listHelper,
			FeatureActivationHelper $featureActivationHelper,
			VariableApiInterface $variableApi
			) {
				$this->setTranslator($translator);
				$this->entityFactory = $entityFactory;
				$this->collectionFilterHelper = $collectionFilterHelper;
				$this->entityDisplayHelper = $entityDisplayHelper;
				$this->listHelper = $listHelper;
				$this->featureActivationHelper = $featureActivationHelper;
				$this->variableApi = $variableApi;
	}
	
    /**
     * Adds basic entity fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addEntityFields(FormBuilderInterface $builder, array $options = [])
    {
        parent::addEntityFields($builder, $options);
        
        $builder->add('uploadFile', UploadType::class, [
            'label' => $this->__('Upload file') . ':',
            'attr' => [
                'class' => ' validate-upload',
                'title' => $this->__('Enter the upload file of the file')
            ],
            'required' => true && $options['mode'] == 'create',
            'entity' => $options['entity'],
            'allowed_extensions' => $this->variableApi->get('MUFilesModule', 'allowedExtensions'),
            'allowed_size' => $this->variableApi->get('MUFilesModule', 'maxSize')
        ]);
    }
    
    /**
     * Adds fields for incoming relationships.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addIncomingRelationshipFields(FormBuilderInterface $builder, array $options = [])
    {
        $specialMenu = $this->variableApi->get('MUFilesModule', 'specialCollectionMenu');
        if ($specialMenu == 1) {
        $queryBuilder = function(EntityRepository $er) {
            // select without joins
            return $er->getListQueryBuilder('', '', false);
        };
        $entityDisplayHelper = $this->entityDisplayHelper;
        $choiceLabelClosure = function ($entity) use ($entityDisplayHelper) {
            return $entityDisplayHelper->getFormattedTitle($entity);
        };
        $builder->add('aliascollection', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
            'class' => 'MUFilesModule:CollectionEntity',
            'choice_label' => $choiceLabelClosure,
            'multiple' => false,
            'expanded' => false,
            'query_builder' => $queryBuilder,
            'placeholder' => $this->__('Please choose an option.'),
            'required' => false,
            'label' => $this->__('Aliascollection'),
            'attr' => [
                'title' => $this->__('Choose the aliascollection.'),
                'disabled' => 'disabled'
            ]
        ]);
        } else {
            $queryBuilder = function(EntityRepository $er) {
                // select without joins
                return $er->getListQueryBuilder('', '', false);
            };
            $entityDisplayHelper = $this->entityDisplayHelper;
            $choiceLabelClosure = function ($entity) use ($entityDisplayHelper) {
                return $entityDisplayHelper->getFormattedTitle($entity);
            };
            $builder->add('aliascollection', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
                'class' => 'MUFilesModule:CollectionEntity',
                'choice_label' => $choiceLabelClosure,
                'multiple' => false,
                'expanded' => false,
                'query_builder' => $queryBuilder,
                'placeholder' => $this->__('Please choose an option.'),
                'required' => false,
                'label' => $this->__('Aliascollection'),
                'attr' => [
                    'title' => $this->__('Choose the aliascollection.')
                ]
            ]);
        }
    }
}
