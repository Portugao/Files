<?php
/**
 * Files.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\FilesModule\Form\Type\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormBuilderInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\GroupsModule\Constant as GroupsConstant;
use Zikula\GroupsModule\Entity\RepositoryInterface\GroupRepositoryInterface;

/**
 * Configuration form type base class.
 */
abstract class AbstractConfigType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var array
     */
    protected $moduleVars;

    /**
     * ConfigType constructor.
     *
     * @param TranslatorInterface      $translator      Translator service instance
     * @param object                   $moduleVars      Existing module vars
     * @param GroupRepositoryInterface $groupRepository GroupRepository service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        $moduleVars,
        GroupRepositoryInterface $groupRepository
    ) {
        $this->setTranslator($translator);
        $this->moduleVars = $moduleVars;

        // prepare group selector values
        foreach (['moderationGroupForCollections', 'moderationGroupForFiles'] as $groupFieldName) {
            $groupId = intval($this->moduleVars[$groupFieldName]);
            if ($groupId < 1) {
                // fallback to admin group
                $groupId = GroupsConstant::GROUP_ID_ADMIN;
            }
            $this->moduleVars[$groupFieldName] = $groupRepository->find($groupId);
        }
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addGeneralSsettingsFields($builder, $options);
        $this->addModerationFields($builder, $options);
        $this->addListViewsFields($builder, $options);
        $this->addIntegrationFields($builder, $options);

        $builder
            ->add('save', SubmitType::class, [
                'label' => $this->__('Update configuration'),
                'icon' => 'fa-check',
                'attr' => [
                    'class' => 'btn btn-success'
                ]
            ])
            ->add('cancel', SubmitType::class, [
                'label' => $this->__('Cancel'),
                'icon' => 'fa-times',
                'attr' => [
                    'class' => 'btn btn-default',
                    'formnovalidate' => 'formnovalidate'
                ]
            ])
        ;
    }

    /**
     * Adds fields for general ssettings fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addGeneralSsettingsFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('allowedExtensions', TextType::class, [
                'label' => $this->__('Allowed extensions') . ':',
                'required' => false,
                'data' => isset($this->moduleVars['allowedExtensions']) ? $this->moduleVars['allowedExtensions'] : '',
                'empty_data' => 'pdf, doc, docx, odt',
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the allowed extensions.')
                ],
            ])
            ->add('onlyParent', CheckboxType::class, [
                'label' => $this->__('Only parent') . ':',
                'required' => false,
                'data' => (bool)(isset($this->moduleVars['onlyParent']) ? $this->moduleVars['onlyParent'] : false),
                'attr' => [
                    'title' => $this->__('The only parent option.')
                ],
            ])
            ->add('specialCollectionMenue', CheckboxType::class, [
                'label' => $this->__('Special collection menue') . ':',
                'required' => false,
                'data' => (bool)(isset($this->moduleVars['specialCollectionMenue']) ? $this->moduleVars['specialCollectionMenue'] : false),
                'attr' => [
                    'title' => $this->__('The special collection menue option.')
                ],
            ])
        ;
    }

    /**
     * Adds fields for moderation fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addModerationFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('moderationGroupForCollections', EntityType::class, [
                'label' => $this->__('Moderation group for collections') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Used to determine moderator user accounts for sending email notifications.')
                ],
                'help' => $this->__('Used to determine moderator user accounts for sending email notifications.'),
                'data' => isset($this->moduleVars['moderationGroupForCollections']) ? $this->moduleVars['moderationGroupForCollections'] : '',
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Choose the moderation group for collections.')
                ],// Zikula core should provide a form type for this to hide entity details
                'class' => 'ZikulaGroupsModule:GroupEntity',
                'choice_label' => 'name',
                'choice_value' => 'gid'
            ])
            ->add('moderationGroupForFiles', EntityType::class, [
                'label' => $this->__('Moderation group for files') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Used to determine moderator user accounts for sending email notifications.')
                ],
                'help' => $this->__('Used to determine moderator user accounts for sending email notifications.'),
                'data' => isset($this->moduleVars['moderationGroupForFiles']) ? $this->moduleVars['moderationGroupForFiles'] : '',
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Choose the moderation group for files.')
                ],// Zikula core should provide a form type for this to hide entity details
                'class' => 'ZikulaGroupsModule:GroupEntity',
                'choice_label' => 'name',
                'choice_value' => 'gid'
            ])
        ;
    }

    /**
     * Adds fields for list views fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addListViewsFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('collectionEntriesPerPage', IntegerType::class, [
                'label' => $this->__('Collection entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of collections shown per page')
                ],
                'help' => $this->__('The amount of collections shown per page'),
                'required' => false,
                'data' => isset($this->moduleVars['collectionEntriesPerPage']) ? intval($this->moduleVars['collectionEntriesPerPage']) : intval(10),
                'empty_data' => intval('10'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the collection entries per page.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('linkOwnCollectionsOnAccountPage', CheckboxType::class, [
                'label' => $this->__('Link own collections on account page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to add a link to collections of the current user on his account page')
                ],
                'help' => $this->__('Whether to add a link to collections of the current user on his account page'),
                'required' => false,
                'data' => (bool)(isset($this->moduleVars['linkOwnCollectionsOnAccountPage']) ? $this->moduleVars['linkOwnCollectionsOnAccountPage'] : true),
                'attr' => [
                    'title' => $this->__('The link own collections on account page option.')
                ],
            ])
            ->add('fileEntriesPerPage', IntegerType::class, [
                'label' => $this->__('File entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of files shown per page')
                ],
                'help' => $this->__('The amount of files shown per page'),
                'required' => false,
                'data' => isset($this->moduleVars['fileEntriesPerPage']) ? intval($this->moduleVars['fileEntriesPerPage']) : intval(10),
                'empty_data' => intval('10'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the file entries per page.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('linkOwnFilesOnAccountPage', CheckboxType::class, [
                'label' => $this->__('Link own files on account page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to add a link to files of the current user on his account page')
                ],
                'help' => $this->__('Whether to add a link to files of the current user on his account page'),
                'required' => false,
                'data' => (bool)(isset($this->moduleVars['linkOwnFilesOnAccountPage']) ? $this->moduleVars['linkOwnFilesOnAccountPage'] : true),
                'attr' => [
                    'title' => $this->__('The link own files on account page option.')
                ],
            ])
        ;
    }

    /**
     * Adds fields for integration fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addIntegrationFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('enabledFinderTypes', ChoiceType::class, [
                'label' => $this->__('Enabled finder types') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).')
                ],
                'help' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).'),
                'data' => isset($this->moduleVars['enabledFinderTypes']) ? $this->moduleVars['enabledFinderTypes'] : '',
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Choose the enabled finder types.')
                ],'choices' => [
                    $this->__('Collection') => 'collection',
                    $this->__('File') => 'file'
                ],
                'choices_as_values' => true,
                'multiple' => true
            ])
        ;
    }

    /**
     * @inheritDoc
     */
    public function getBlockPrefix()
    {
        return 'mufilesmodule_config';
    }
}
